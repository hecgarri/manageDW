# Script completo: Scraper Servel con logging robusto y limpieza phantomjs
# ============================================================================
# ============================================================================
# Carga paquete manageDW (ajusta según tu estructura)
# ============================================================================
library(manageDW)
# ============================================================================
# Limpieza manual de phantomjs en binman antes de cargar RSelenium
# ============================================================================
phantomjs_dir <- file.path(Sys.getenv("LOCALAPPDATA"), "binman", "phantomjs")
if (dir.exists(phantomjs_dir)) {
unlink(phantomjs_dir, recursive = TRUE, force = TRUE)
cat("Directorio phantomjs eliminado de binman.\n")
}
# Opcional: eliminar toda la carpeta binman si persisten errores
# binman_dir <- file.path(Sys.getenv("LOCALAPPDATA"), "binman")
# if (dir.exists(binman_dir)) {
#   unlink(binman_dir, recursive = TRUE, force = TRUE)
#   cat("Directorio binman eliminado completamente.\n")
# }
# ============================================================================
# Reinstala RSelenium y dependencias (ejecutar una vez en consola R)
# ============================================================================
# remove.packages(c("RSelenium", "wdman", "binman"))
# install.packages("RSelenium")
# ============================================================================
# Carga de paquetes requeridos
# ============================================================================
cargar_paquetes(c("RSelenium", "rvest", "tidyverse", "logger", "R6"))
# ============================================================================
# Configuración de logger
# ============================================================================
log_layout(layout_glue_colors)
log_threshold(INFO)
log_info("=== Inicio de ejecución ===")
# ============================================================================
# Clase de Scraper Servel
# ============================================================================
ServelScraper <- R6::R6Class("ServelScraper",
public = list(
remDr = NULL,
rD = NULL,
initialize = function() {
log_info("Iniciando Selenium...")
self$rD <- rsDriver(
browser = "chrome",
chromever = "latest",
check = FALSE,     # evita buscar phantomjs
verbose = FALSE,   # menos logs de binman
extraCapabilities = list(
chromeOptions = list(args = c("--headless", "--no-sandbox", "--disable-gpu"))
)
)
self$remDr <- self$rD$client
},
navegar_base = function(url = "https://elecciones.servel.cl/") {
log_info("Navegando a: {url}")
self$remDr$navigate(url)
Sys.sleep(3)
},
obtener_resultados = function() {
log_info("Obteniendo resultados...")
html <- self$remDr$getPageSource()[[1]]
page <- read_html(html)
tabla <- page %>%
html_node("table") %>% # ajustar selector según estructura real
html_table(fill = TRUE)
return(tabla)
},
cerrar = function() {
log_info("Cerrando Selenium...")
self$remDr$close()
self$rD$server$stop()
}
)
)
# ============================================================================
# Ejecución del scraping con manejo de errores
# ============================================================================
tryCatch({
log_info("Inicializando scraper Servel...")
scraper <- ServelScraper$new()
log_info("Navegando al sitio...")
scraper$navegar_base()
log_info("Extrayendo resultados...")
resultados <- scraper$obtener_resultados()
log_success("Extracción completada.")
log_info("Guardando resultados...")
write_csv(resultados, "resultados_servel.csv")
log_success("Resultados guardados exitosamente.")
}, error = function(e) {
log_error("Se produjo un error: {e$message}")
})
# ============================================================================
# Cierre de Selenium si scraper existe
# ============================================================================
if (exists("scraper")) {
scraper$cerrar()
}
log_success("=== Script finalizado sin errores críticos ===")
# ============================================================================
# Script completo: Scraper Servel con logging robusto y limpieza phantomjs
# ============================================================================
# ============================================================================
# Carga paquete manageDW (ajusta según tu estructura)
# ============================================================================
library(manageDW)
# ============================================================================
# Limpieza manual de phantomjs en binman antes de cargar RSelenium
# ============================================================================
phantomjs_dir <- file.path(Sys.getenv("LOCALAPPDATA"), "binman", "phantomjs")
if (dir.exists(phantomjs_dir)) {
unlink(phantomjs_dir, recursive = TRUE, force = TRUE)
cat("Directorio phantomjs eliminado de binman.\n")
}
# Opcional: eliminar toda la carpeta binman si persisten errores
# binman_dir <- file.path(Sys.getenv("LOCALAPPDATA"), "binman")
# if (dir.exists(binman_dir)) {
#   unlink(binman_dir, recursive = TRUE, force = TRUE)
#   cat("Directorio binman eliminado completamente.\n")
# }
# ============================================================================
# Reinstala RSelenium y dependencias (ejecutar una vez en consola R)
# ============================================================================
# remove.packages(c("RSelenium", "wdman", "binman"))
# install.packages("RSelenium")
# ============================================================================
# Carga de paquetes requeridos
# ============================================================================
cargar_paquetes(c("RSelenium", "rvest", "tidyverse", "logger", "R6"))
# ============================================================================
# Configuración de logger
# ============================================================================
log_layout(layout_glue_colors)
log_threshold(INFO)
log_info("=== Inicio de ejecución ===")
# ============================================================================
# Clase de Scraper Servel
# ============================================================================
ServelScraper <- R6::R6Class("ServelScraper",
public = list(
remDr = NULL,
rD = NULL,
initialize = function() {
log_info("Iniciando Selenium...")
self$rD <- rsDriver(
browser = "chrome",
chromever = "latest",
check = FALSE,     # evita buscar phantomjs
verbose = FALSE,   # menos logs de binman
extraCapabilities = list(
chromeOptions = list(args = c("--headless", "--no-sandbox", "--disable-gpu"))
)
)
self$remDr <- self$rD$client
},
navegar_base = function(url = "https://elecciones.servel.cl/") {
log_info("Navegando a: {url}")
self$remDr$navigate(url)
Sys.sleep(3)
},
obtener_resultados = function() {
log_info("Obteniendo resultados...")
html <- self$remDr$getPageSource()[[1]]
page <- read_html(html)
tabla <- page %>%
html_node("table") %>% # ajustar selector según estructura real
html_table(fill = TRUE)
return(tabla)
},
cerrar = function() {
log_info("Cerrando Selenium...")
self$remDr$close()
self$rD$server$stop()
}
)
)
# ============================================================================
# Ejecución del scraping con manejo de errores
# ============================================================================
tryCatch({
log_info("Inicializando scraper Servel...")
scraper <- ServelScraper$new()
log_info("Navegando al sitio...")
scraper$navegar_base()
log_info("Extrayendo resultados...")
resultados <- scraper$obtener_resultados()
log_success("Extracción completada.")
log_info("Guardando resultados...")
write_csv(resultados, "resultados_servel.csv")
log_success("Resultados guardados exitosamente.")
}, error = function(e) {
log_error("Se produjo un error: {e$message}")
})
# ============================================================================
# Cierre de Selenium si scraper existe
# ============================================================================
if (exists("scraper")) {
scraper$cerrar()
}
log_success("=== Script finalizado sin errores críticos ===")
## ---------------------------------------------------------------------------
##  ETL SII – versión 2025-06-23
##           • detección automática de cabeceras
##           • renombrado dinámico
##           • filtrado de archivos por dimensiones requeridas
## ---------------------------------------------------------------------------
rm(list = ls())
setwd("C:/Users/hecto/OneDrive/Escritorio/datawarehouse")
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document("./manageDW_modificado")
devtools::load_all("./manageDW_modificado")
## --- 2. Paquetes auxiliares -------------------------------------------------
cargar_paquetes(c("data.table", "stringr", "assertthat", "dotenv", "here"))
## --- 3. Variables de entorno y conexión ------------------------------------
dotenv::load_dot_env(here("manageDW_modificado/.env"))
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
crear_base_si_no_existe("dm_sii",
env_path = here("manageDW_modificado/.env"))
con <- establecer_conexion(db_name = "dm_sii",
env_path = here("manageDW_modificado/.env"))
## --- 4. Descarga de datos SII ----------------------------------------------
#   (idempotente: no descarga si los TXT ya existen)
descargar_empresas_sii()
txt_files <- list.files("data-raw/sii",
pattern = "\\.txt$", full.names = TRUE)
## --- 5. Inventario de cabeceras y filtrado inteligente ----------------------
hdr_map         <- detectar_claves_sii(txt_files)         # mapeo original ↔ estándar
good_basenames  <- filtrar_archivos_dim(hdr_map)         # devuelve solo basenames
# Reconstruir rutas completas a partir de txt_files
good <- txt_files[ basename(txt_files) %in% good_basenames ]
## --- 6. Procesamiento masivo -----------------------------------------------
resultado <- procesar_archivos_sii(
files   = good,      # rutas completas
con     = con,
hdr_map = hdr_map
)
## --- 7. Resumen final -------------------------------------------------------
message("\n=== ETL finalizado ===")
message(sprintf("Archivos cargados   : %d", length(resultado$procesados)))
message(sprintf("Archivos descartados: %d", length(resultado$omitidos)))
help(package = "AhorroCM")
## ---------------------------------------------------------------------------
##  ETL SII – versión 2025-06-23
##           • detección automática de cabeceras
##           • renombrado dinámico
##           • filtrado de archivos por dimensiones requeridas
## ---------------------------------------------------------------------------
rm(list = ls())
getwd()
setwd("C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_modificado")
rm(list = ls())
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document()
devtools::load_all()
devtools::check()
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
tools::showNonASCIIfile("R/cargar_dimensiones.R")
class(tools::showNonASCIIfile("R/cargar_dimensiones.R"))
length(tools::showNonASCIIfile("R/cargar_dimensiones.R"))
if (length(tools::showNonASCIIfile("R/cargar_dimensiones.R"))>0){
ruta <- "R/cargar_dimensiones.R"
lineas <- readLines(ruta, encoding = "UTF-8")
lineas_limpias <- iconv(lineas, from = "UTF-8", to = "ASCII//TRANSLIT")
writeLines(lineas_limpias, ruta, useBytes = TRUE)
}
if (length(tools::showNonASCIIfile("R/cargar_dimensiones.R"))>0){
ruta <- "R/cargar_dimensiones.R"
lineas <- readLines(ruta, encoding = "UTF-8")
lineas_limpias <- iconv(lineas, from = "UTF-8", to = "ASCII//TRANSLIT")
writeLines(lineas_limpias, ruta, useBytes = TRUE)
}
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
if (length(tools::showNonASCIIfile("R/cargar_dimensiones.R"))>0){
ruta <- "R/cargar_dimensiones.R"
lineas <- readLines(ruta, encoding = "UTF-8")
lineas_limpias <- iconv(lineas, from = "UTF-8", to = "ASCII//TRANSLIT")
writeLines(lineas_limpias, ruta, useBytes = TRUE)
}
limpiar_ascii <- function(rutas) {
for (ruta in rutas) {
no_ascii <- tools::showNonASCIIfile(ruta)
if (length(no_ascii) > 0) {
lineas <- readLines(ruta, encoding = "UTF-8")
lineas_limpias <- iconv(lineas, from = "UTF-8", to = "ASCII//TRANSLIT")
writeLines(lineas_limpias, ruta, useBytes = TRUE)
message(sprintf("Limpio %d líneas en %s", length(no_ascii), ruta))
} else {
message(sprintf("Sin caracteres no-ASCII: %s", ruta))
}
}
invisible(TRUE)
}
# Ejecución para todos los archivos detectados
archivos <- c(
"R/cargar_dimensiones.R",
"R/cargar_hechos_empresas.R",
"R/crear_base_si_no_existe.R",
"R/crear_esquema_empresas.R",
"R/descargar_empresas_sii.R",
"R/filtrar_archivos_dim.R",
"R/procesar_archivos_sii.R"
)
limpiar_ascii(archivos)
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
devtools::check()
devtools::build()
install.packages("manageDW_modificado_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("../manageDW_modificado_0.0.0.9000.tar.gz", repos = NULL, type = "source")
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_modificado/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE
)
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE
)
library(manageDW)
detach("package:manageDW", unload = TRUE)
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE
)
library(manageDW)
detach("package:manageDW", unload = TRUE)
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE,
upgrade = "never"
)
help(package = "manageDW")
## --- 3. Variables de entorno y conexión ------------------------------------
dotenv::load_dot_env(here("manageDW_modificado/.env"))
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
library(manageDW)
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
help(package = "manageDW")
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
rm(list = ls())
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
## --- 0. Limpieza de carácteres no ASCII ----
limpiar_ascii <- function(rutas) {
for (ruta in rutas) {
no_ascii <- tools::showNonASCIIfile(ruta)
if (length(no_ascii) > 0) {
lineas <- readLines(ruta, encoding = "UTF-8")
lineas_limpias <- iconv(lineas, from = "UTF-8", to = "ASCII//TRANSLIT")
writeLines(lineas_limpias, ruta, useBytes = TRUE)
message(sprintf("Limpio %d líneas en %s", length(no_ascii), ruta))
} else {
message(sprintf("Sin caracteres no-ASCII: %s", ruta))
}
}
invisible(TRUE)
}
# Ejecución para todos los archivos detectados
archivos <- c(
"R/cargar_dimensiones.R",
"R/cargar_hechos_empresas.R",
"R/crear_base_si_no_existe.R",
"R/crear_esquema_empresas.R",
"R/descargar_empresas_sii.R",
"R/filtrar_archivos_dim.R",
"R/procesar_archivos_sii.R"
)
limpiar_ascii(archivos)
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
devtools::build()
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE,
upgrade = "never"
)
library(manageDW)
detach("package:manageDW", unload = TRUE)
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE,
upgrade = "never"
)
library(manageDW)
dotenv::load_dot_env(here("manageDW_modificado/.env"))
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
con
crear_base_si_no_existe("dm_sii",
env_path = here(".env"))
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
## --- 0. Limpieza de carácteres no ASCII ----
limpiar_ascii <- function(rutas) {
for (ruta in rutas) {
no_ascii <- tools::showNonASCIIfile(ruta)
if (length(no_ascii) > 0) {
lineas <- readLines(ruta, encoding = "UTF-8")
lineas_limpias <- iconv(lineas, from = "UTF-8", to = "ASCII//TRANSLIT")
writeLines(lineas_limpias, ruta, useBytes = TRUE)
message(sprintf("Limpio %d líneas en %s", length(no_ascii), ruta))
} else {
message(sprintf("Sin caracteres no-ASCII: %s", ruta))
}
}
invisible(TRUE)
}
# Ejecución para todos los archivos detectados
archivos <- c(
"R/cargar_dimensiones.R",
"R/cargar_hechos_empresas.R",
"R/crear_base_si_no_existe.R",
"R/crear_esquema_empresas.R",
"R/descargar_empresas_sii.R",
"R/filtrar_archivos_dim.R",
"R/procesar_archivos_sii.R"
)
limpiar_ascii(archivos)
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
devtools::build()
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE,
upgrade = "never"
)
library(manageDW)
detach("package:manageDW", unload = TRUE)
## --- 0. Limpieza de carácteres no ASCII ----
limpiar_ascii <- function(rutas) {
for (ruta in rutas) {
no_ascii <- tools::showNonASCIIfile(ruta)
if (length(no_ascii) > 0) {
lineas <- readLines(ruta, encoding = "UTF-8")
lineas_limpias <- iconv(lineas, from = "UTF-8", to = "ASCII//TRANSLIT")
writeLines(lineas_limpias, ruta, useBytes = TRUE)
message(sprintf("Limpio %d líneas en %s", length(no_ascii), ruta))
} else {
message(sprintf("Sin caracteres no-ASCII: %s", ruta))
}
}
invisible(TRUE)
}
# Ejecución para todos los archivos detectados
archivos <- c(
"R/cargar_dimensiones.R",
"R/cargar_hechos_empresas.R",
"R/crear_base_si_no_existe.R",
"R/crear_esquema_empresas.R",
"R/descargar_empresas_sii.R",
"R/filtrar_archivos_dim.R",
"R/procesar_archivos_sii.R"
)
limpiar_ascii(archivos)
## --- 1. Cargar paquete local ------------------------------------------------
devtools::document()
devtools::load_all()
#devtools::test()
devtools::check()
devtools::build()
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE,
upgrade = "never"
)
library(manageDW)
detach("package:manageDW", unload = TRUE)
rm(list = ls())
remotes::install_local(
path         = "C:/Users/hecto/OneDrive/Escritorio/datawarehouse/manageDW_0.0.0.9000.tar.gz",
dependencies = TRUE,
upgrade = "never"
)
dotenv::load_dot_env(here("manageDW_modificado/.env"))
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
library(manageDW)
dotenv::load_dot_env(here("manageDW_modificado/.env"))
con <- establecer_conexion(env_path = here("manageDW_modificado/.env"))
crear_base_si_no_existe("dm_sii",
env_path = here(".env"))
dotenv::load_dot_env(here(".env"))
getwd()
list.files()
dotenv::load_dot_env(here("/.env"))
here()
here(getwd())
here()
